//
// Generated file, do not edit! Created by nedtool 5.6 from Packet.msg.
//

#ifndef __PACKET_M_H
#define __PACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>Packet.msg:16</tt> by nedtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * packet Packet
 * {
 *     string declaredAddr \@packetData;
 *     string srcAddr \@packetData;
 *     string destAddr \@packetData;
 *     int forwardLabel \@packetData;
 *     int traceLabel \@packetData;
 *     int hopCount \@packetData;
 *     int entrance \@packetData;
 *     int64_t sendTime \@packetData;
 * }
 * </pre>
 */
class Packet : public ::omnetpp::cPacket
{
  protected:
    ::omnetpp::opp_string declaredAddr;
    ::omnetpp::opp_string srcAddr;
    ::omnetpp::opp_string destAddr;
    int forwardLabel;
    int traceLabel;
    int hopCount;
    int entrance;
    int64_t sendTime;

  private:
    void copy(const Packet& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Packet&);

  public:
    Packet(const char *name=nullptr, short kind=0);
    Packet(const Packet& other);
    virtual ~Packet();
    Packet& operator=(const Packet& other);
    virtual Packet *dup() const override {return new Packet(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getDeclaredAddr() const;
    virtual void setDeclaredAddr(const char * declaredAddr);
    virtual const char * getSrcAddr() const;
    virtual void setSrcAddr(const char * srcAddr);
    virtual const char * getDestAddr() const;
    virtual void setDestAddr(const char * destAddr);
    virtual int getForwardLabel() const;
    virtual void setForwardLabel(int forwardLabel);
    virtual int getTraceLabel() const;
    virtual void setTraceLabel(int traceLabel);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual int getEntrance() const;
    virtual void setEntrance(int entrance);
    virtual int64_t getSendTime() const;
    virtual void setSendTime(int64_t sendTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Packet& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Packet& obj) {obj.parsimUnpack(b);}


#endif // ifndef __PACKET_M_H

